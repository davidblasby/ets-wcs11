<?xml version="1.0" encoding="UTF-8"?>
  <ctl:package xmlns:ctl="http://www.occamlab.com/ctl"
   xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
   xmlns:fn="http://www.w3.org/2005/02/xpath-functions" xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:saxon="http://saxon.sf.net/"
   xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:wcs="http://schemas.opengis.net/wcs/1.1.1"
   xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   
    <ctl:test xmlns="" name="wcs:GetCapabilities-main" isConformanceClass="true" isBasic="true">
      <ctl:param name="url"/>
      <ctl:assertion>All assertions for "GetCapabilities" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the GetCapabilities module.</ctl:comment>
      <ctl:link xmlns="" title="1. WCS-GetCapabilities">http://www.opengeospatial.org/standards/wcs#GetCapabilities</ctl:link>
      <ctl:code>
        <ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
        <xsl:variable name="result1">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>GET</ctl:method>
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">GetCapabilities</ctl:param>
       <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="sections">OperationsMetadata,Contents</ctl:param>
            <ctl:param name="acceptversions">1.1.1</ctl:param>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:variable name="version-number" select="$result1/*[local-name()='Capabilities'][@version]/@version"/>
        <xsl:choose>
          <xsl:when test="$version-number = '1.1.1'">
            <ctl:message select="concat('The service metadata document version number is ', $version-number, '.')"/>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:message select="concat('The service metadata document has version ', $version-number, ' but expected to find 1.1.1 as the highest protocol supported. See OGC 06-121r3 subclause 7.3.2.')"/>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:fail/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="EqualUpdateSequenceValue">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
        </xsl:variable>
        <xsl:variable name="http-get">GET</xsl:variable>
        <xsl:variable name="http-xml">XML</xsl:variable>
        <xsl:variable name="http-soap">SOAP</xsl:variable>
        <xsl:variable name="url-get">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="url-xml">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="xml-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="xml-supported-alternate">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="soap-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
        </xsl:variable>
        <xsl:variable name="store-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='True'"/>
        </xsl:variable>
        <xsl:variable name="sections-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'] and not($result1/*[local-name()='Capabilities']/*[local-name()='ServiceProvider'])"/>
        </xsl:variable>
        <xsl:variable name="identifier1">
          <ctl:call-function name="wcs:select-identifier">
            <ctl:with-param name="result1" select="$result1"/>
            <ctl:with-param name="identifier_no" select="1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:variable name="identifier2">
          <ctl:call-function name="wcs:select-identifier">
            <ctl:with-param name="result1" select="$result1"/>
            <ctl:with-param name="identifier_no" select="2"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:variable name="identifier3">
          <ctl:call-function name="wcs:select-identifier">
            <ctl:with-param name="result1" select="$result1"/>
            <ctl:with-param name="identifier_no" select="3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="string-length($version-number) = 0 and string-length($url-get) = 0 and string-length($identifier1) = 0">
          <ctl:message>The server seems to have a problem with handling the GetCapabilities sections parameter. No tests will be performed.</ctl:message>
          <ctl:fail/>
        </xsl:if>
        <ctl:message select="concat('The EqualUpdateSequence value is ', $EqualUpdateSequenceValue, '.')"/>
        <ctl:message select="concat('The URL for KVP encoding is ', $url-get, '.')"/>
        <ctl:message select="concat('The URL for XML encoding is ', $url-xml, '.')"/>
        <xsl:choose>
          <xsl:when test="$xml-supported = 'true' or $xml-supported-alternate = 'true'">
            <ctl:message>XML encoding is supported.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message>XML encoding is not supported.</ctl:message>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="$soap-supported = 'true'">
          <ctl:message>No tests using SOAP encoding will be performed. The tests for SOAP encoding are not implemented.</ctl:message>
        </xsl:if>
        <ctl:message select="concat('sections-supported: ', $sections-supported, '.')"/>
        <xsl:variable name="update-values">
          <xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">
            <ctl:form>
              <h3>Update Sequence Values for WCS 1.1.1</h3>
              <p>This WCS service
                               <xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">supports</xsl:if><xsl:if test="string-length($EqualUpdateSequenceValue) = 0">does NOT support</xsl:if>
                                 updateSequence in GetCapabilities requests. Please enter values for the minimal value,
                                      the maximal value and a bogus, well-formed but non-existant, value for the updateSequence.</p>
              <blockquote>
                <table border="0" cellpadding="5">
                  <tr>
                    <td align="left">Minimal Value</td>
                    <td align="left">
                      <input type="text" name="MinimalValue" size="15" value="0"/>
                    </td>
                  </tr>
                  <tr>
                    <td align="left">Maximal Value</td>
                    <td align="left">
                      <input type="text" name="MaximalValue" size="15" value="1399999999999"/>
                    </td>
                  </tr>
                  <tr>
                    <td align="left">Bogus Value</td>
                    <td align="left">
                      <input type="text" name="BogusValue" size="15" value="bogus"/>
                    </td>
                  </tr>
                </table>
                <table border="0" cellpadding="5">
                  <tr>
                    <td align="center">
                      <input type="submit" value="Submit"/>
                    </td>
                  </tr>
                </table>
              </blockquote>
            </ctl:form>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="MinimalUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='MinimalValue']"/>
        </xsl:variable>
        <xsl:variable name="MaximalUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='MaximalValue']"/>
        </xsl:variable>
        <xsl:variable name="BogusUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='BogusValue']"/>
        </xsl:variable>
        <ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
        <xsl:if test="string-length($version-number) != 0 or string-length($url-get) != 0 or string-length($identifier1) != 0">
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MinimalRequest', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MinimalRequest', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MinimalRequest', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_ServiceIdentification', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_ServiceIdentification', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_ServiceIdentification', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_ServiceProvider', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_ServiceProvider', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_ServiceProvider', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_OperationsMetadata', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_OperationsMetadata', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_OperationsMetadata', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Contents', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Contents', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Contents', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_All', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_All', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_All', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Two_Values', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Two_Values', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Two_Values', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Multiple_Values', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Multiple_Values', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Multiple_Values', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_1.1.1', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_1.1.1', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_1.1.1', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_Multiple', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_Multiple', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_Multiple', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_No_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_No_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_No_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Equal_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Equal_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Equal_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Bogus_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Bogus_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Bogus_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Lowest_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Lowest_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Lowest_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Highest_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Highest_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Highest_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptFormats_TextXML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptFormats_TextXML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptFormats_TextXML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptFormats_TextBogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptFormats_TextBogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptFormats_TextBogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_ServiceIdentification', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_ServiceIdentification', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_ServiceIdentification', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceIdentification', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_ServiceProvider', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_ServiceProvider', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_ServiceProvider', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceProvider', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Required_Attributes', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Required_Attributes', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Required_Attributes', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Required_Attributes', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Post_Encoding', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Encoding', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Encoding', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Encoding', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Multiple_Connect_Points', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Store_Parameter', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Store_Parameter', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Store_Parameter', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Store_Parameter', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedCRS', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedFormat', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Title', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Abstract', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with only mandatory
           parameters is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 1. GetCapabilities minimal request</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceIdentification is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 2. GetCapabilities Sections ServiceIdentification</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceProvider is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 3. GetCapabilities Sections ServiceProvider</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceProvider</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceProvider</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value OperationsMetadata is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 4. GetCapabilities Sections OperationsMetadata</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">OperationsMetadata</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>OperationsMetadata</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Contents is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 5. GetCapabilities Sections Contents</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">Contents</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>Contents</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_All">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value All is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 6. GetCapabilities Sections All</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">All</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>All</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with two values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 7. GetCapabilities Sections Two Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification,ServiceProvider</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                    <ows:Section>ServiceProvider</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with multiple values is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 8. GetCapabilities Sections Multiple Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification,ServiceProvider,OperationsMetadata,Contents</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                    <ows:Section>ServiceProvider</ows:Section>
                    <ows:Section>OperationsMetadata</ows:Section>
                    <ows:Section>Contents</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Bogus is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 9. GetCapabilities Sections Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.1 Table 8.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">Bogus</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>Bogus</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with value 1.1.1 is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 10. GetCapabilities AcceptVersions 1.1.1</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>1.1.1</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with multiple values is submitted, the response is valid XML
            that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 13. GetCapabilities AcceptVersions Multiple Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">0.0.0,1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>0.0.0</ows:Version>
                    <ows:Version>1.1.1</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an UpdateSequence
           parameter with no value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 14. GetCapabilities UpdateSequence No Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence"/>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           of EqualUpdateSequenceValue is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 15. GetCapabilities UpdateSequence Equal Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('EqualUpdateSequenceValue is |', $EqualUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$EqualUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$EqualUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)!=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to a bogus value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema. The bogus value
           is one that is not a valid value in the server's updateSequence set
           of values. The value is supplied by the user.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 16. GetCapabilities UpdateSequence Bogus Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('BogusUpdateSequenceValue is |', $BogusUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$BogusUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$BogusUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the lowest possible value of the server's updateSequence set
           of values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema. The value is
           supplied by the user.</ctl:assertion>
      <ctl:comment xmlns="">Table 17. GetCapabilities UpdateSequence Lowest Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('MinimalUpdateSequenceValue is |', $MinimalUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$MinimalUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$MinimalUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the highest possible value of the server's updateSequence
           set of values is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema. The value is
           supplied by the user.</ctl:assertion>
      <ctl:comment xmlns="">Table 18. GetCapabilities UpdateSequence Highest Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('MaximalUpdateSequenceValue is |', $MaximalUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$MaximalUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$MaximalUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter with a value of MIME type text/xml is submitted, the response
           is valid XML that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 19. GetCapabilities AcceptFormats Text/XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptformats">text/xml</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptFormats>
                    <ows:OutputFormat>text/xml</ows:OutputFormat>
                  </ows:AcceptFormats>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter wiith a value of MIME type text/bogus is submitted, the
           response is valid XML that validates against the WCS 1.1.1
           GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 20. GetCapabilities AcceptFormats Text/Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
         <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptformats">text/bogus</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptFormats>
                    <ows:OutputFormat>text/bogus</ows:OutputFormat>
                  </ows:AcceptFormats>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains a ServiceIdentification section that validates against the
           OWS Common 1.1.0 ServiceIdentification schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 21. GetCapabilities Response ServiceIdentification</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.4 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains a ServiceProvider section that validates against the OWS
           Common 1.1.0 ServiceProvider schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 22. GetCapabilities Response ServiceProvider</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.5 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that validates against the OWS
           Common 1.1.0 OperationsMetadata schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 23. GetCapabilities Response OperationsMetadata</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.1 and 8.3.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.6, 7.4.7 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that has the three mandatory
           values of the XML attributes.</ctl:assertion>
      <ctl:comment xmlns="">Table 24. GetCapabilities Response OperationsMetadata Required Attributes</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.7.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section for DCP HTTP Post transfers,
           the PostEncoding constraint is specified.</ctl:assertion>
      <ctl:comment xmlns="">Table 25. GetCapabilities Response OperationsMetadata Post Encoding</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section for DCP HTTP Post transfers,
           that multiple encoding constraints with multiple connect
           point URLs is valid.</ctl:assertion>
      <ctl:comment xmlns="">Table 26. GetCapabilities Response OperationsMetadata Post Multiple Connect Points</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href)">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that indicates whether the
           store parameter is implemented in GetCoverage requests.</ctl:assertion>
      <ctl:comment xmlns="">Table 27. GetCapabilities Response OperationsMetadata Store Parameter</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False')">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False'"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents section.</ctl:assertion>
      <ctl:comment xmlns="">Table 28. GetCapabilities Response OperationsMetadata Contents</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with a CoverageSummary.</ctl:assertion>
      <ctl:comment xmlns="">Table 29. GetCapabilities Response OperationsMetadata Contents CoverageSummary</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.1 and 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with SupportedCRS that is a union
           of the nested CoverageSummaries.</ctl:assertion>
      <ctl:comment xmlns="">Table 30. GetCapabilities Response OperationsMetadata Contents SupportedCRS</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with SupportedFormat that is a union of
           the nested CoverageSummaries.</ctl:assertion>
      <ctl:comment xmlns="">Table 31. GetCapabilities Response OperationsMetadata Contents SupportedFormat</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has a title.</ctl:assertion>
      <ctl:comment xmlns="">Table 32. GetCapabilities Response OperationsMetadata Contents CoverageSummary Title</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has an abstract.</ctl:assertion>
      <ctl:comment xmlns="">Table 33. GetCapabilities Response OperationsMetadata Contents CoverageSummary Abstract</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has at
           least one supportedFormat listed or inherited.</ctl:assertion>
      <ctl:comment xmlns="">Table 34. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has at least
           one supportedCRS listed or inherited.</ctl:assertion>
      <ctl:comment xmlns="">Table 35. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedCRS</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has either an
           identifier or a subsidiary CoverageSummary.</ctl:assertion>
      <ctl:comment xmlns="">Table 36. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']//*[local-name()='CoverageSummary']">
          <xsl:if test="not(./*[local-name()='Identifier']) and not(./*[local-name()='CoverageSummary'])">
            <ctl:message/>
            <ctl:message>Test failed because an element is missing from the response.</ctl:message>
            <ctl:message>extraction is ./*[local-name()='Identifier'] and ./*[local-name()='CoverageSummary']</ctl:message>
            <ctl:message>for each $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']//*[local-name()='CoverageSummary'] </ctl:message>
            <ctl:message>response-extract is <xsl:value-of select="./*[local-name()='Identifier']"/> and ./*[local-name()='CoverageSummary']</ctl:message>
            <ctl:fail/>
          </xsl:if>
        </xsl:for-each>
        <!--
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary']"/></ctl:message>
        </xsl:if>
        -->
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each identifier must
           conform to XML syntax.</ctl:assertion>
      <ctl:comment xmlns="">Table 37. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each SupportedFormat
           must conform to XML syntax.</ctl:assertion>
      <ctl:comment xmlns="">Table 38. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each identifier
           must be unique for this server.</ctl:assertion>
      <ctl:comment xmlns="">Table 39. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier Unique</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
  </ctl:package>